<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>AWESOM-O //
        <%= trans.MARKETPLACE %>
    </title>

    <link rel="icon" type="image/png" href="/img/favicon.png" />
    <link rel="shortcut icon" type="image/png" href="/img/favicon.png" />
    <meta name="theme-color" content="#ff594f">

    <link rel="alternate" href="/" hreflang="x-default" />
    <link rel="alternate" href="/?hl=en" hreflang="en" />
    <link rel="alternate" href="/?hl=ie" hreflang="ie" />
    <link rel="alternate" href="/?hl=pt" hreflang="pt" />

    <!-- Font Awesome -->

    <link href="/css/fa-all.css" rel="stylesheet">
    <!-- Bootstrap core CSS -->
    <link href="/css/bootstrap.min.css" rel="stylesheet">
    <!-- Material Design Bootstrap -->
    <link href="/css/mdb.min.css" rel="stylesheet">

    <link href="/css/style.css" rel="stylesheet">

    <style>
        @media (min-width: 2300px) {
            .col-xxl-3 {
                -ms-flex: 0 0 25%;
                flex: 0 0 25%;
                max-width: 25%
            }
        }

        code {
            display: block;
            overflow-x: auto;
            padding: 0.5em;
            color: #e2e2e2;
            background: #282c34;
            border-radius: 4px
        }

        .switch.round label .lever {
            width: 54px;
            height: 34px;
            border-radius: 10em;
        }

        .switch.round label .lever:after {
            width: 26px;
            height: 26px;
            border-radius: 50%;
            left: 4px;
            top: 4px;
        }

        .switch.blue-white-switch label input[type=checkbox]:checked+.lever {
            background-color: #2196f3;
        }

        .switch.blue-white-switch label input[type=checkbox]:checked+.lever:after {
            background-color: #fff;
        }

        .switch.blue-white-switch label .lever {
            background-color: #ccc;
        }

        .switch.blue-white-switch label .lever:after {
            background-color: #fff;
        }

        .switch label input[type=checkbox]:checked+.lever:after {
            background-color: #ff594f;
            left: 24px;
        }

        .switch label input[type=checkbox]:checked+.lever {
            background-color: #f8c9c9
        }

        .dropdown-content li>a,
        .dropdown-content li>span {
            color: #2c2c2c;
        }
    </style>

</head>

<body class="fixed-sn">

    <div id="sandbox"></div>
    <!--
    <div id="mdb-preloader" class="flex-center">
        <div id="preloader-markup" class="text-center">
            <img src="/img/headerlogo.png">
            <br>
            <div class="preloader-wrapper active">
                <div class="spinner-layer spinner-red-only">
                    <div class="circle-clipper left">
                        <div class="circle"></div>
                    </div>
                    <div class="gap-patch">
                        <div class="circle"></div>
                    </div>
                    <div class="circle-clipper right">
                        <div class="circle"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
-->
    <%- include ../partials/d-navbar.ejs %>
    <!--Main Layout-->


    <main>
        <div class="mb-5">
            <div class="col-12">
                <div class="row">
                    <div class="col-md-12 pb-4">
                        <div class="card card-image" style="background-image: url(https://cdn.discordapp.com/attachments/456771924639612940/466128291171008522/banner.png);">
                            <div class="text-white text-center py-5 px-4 my-5">
                                <div>

                                    <h1 class="card-title pt-3 mt-5 mb-5 font-bold">
                                        <strong></strong>
                                    </h1>
                                    <p class="mx-5 pt-5 pb-5"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-9 col-sm-12 pb-2">
                        <div class="text-center" style="width: 100%">
                            <h1 class="font-weight-bold mb-2 mt-2 mb-5">
                                <%= trans.FEATURED_SCRIPTS %>
                            </h1>
                        </div>
                        <div class="row justify-content-center" id="featured">

                        </div>

                        <div class="row">
                            <div class="text-center" style="width: 100%">
                                <h1 class="font-weight-bold mb-2 mt-5 pb-1">
                                    <%= trans.ALL_SCRIPTS %>
                                </h1>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <div class="row">
                                    <div class="col-12">
                                        <form class="form-inline md-form mr-auto mb-4">
                                            <input id="search" class="form-control mr-sm-2" type="text" placeholder="<%= trans.SEARCH %>"
                                                aria-label="Search">
                                            <button id="searchBtn" class="btn btn-feinwaru btn-rounded btn-sm my-0"
                                                type="submit">
                                                <%= trans.SEARCH %>
                                            </button>
                                        </form>
                                    </div>

                                </div>
                                <div class="card">
                                    <table class="table table-borderless">
                                        <col width="10%">
                                        <col width="70%">
                                        <col width="20%">

                                        <!--Table body-->
                                        <tbody id="all-scripts">


                                        </tbody>
                                        <!--Table body-->

                                    </table>
                                    <!--Pagination -->
                                    <nav aria-label="pagination example">
                                        <ul id="pagination" class="pagination pagination-circle pg-feinwaru mb-3 justify-content-center">

                                        </ul>
                                    </nav>
                                </div>
                            </div>
                            <!--Table-->
                        </div>

                    </div>

                    <div class="col-md-3 col-sm-12 pb-2">
                        <!-- Card -->
                        <div class="card text-center" style="width: 100%">
                            <div id="fun" class="card-body">

                                <!-- Title -->
                                <h4 class="font-weight-bold mb-1">
                                    Your Scripts
                                </h4>
                                <p class="card-text">Allow your scripts to be used on the Marketplace</p>


                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row pl-md-4 pt-4"></div>
        </div>
    </main>
    <!--/Section: Pricing v.5-->
    <!-- Streak -->

    <%- include ../partials/footer.ejs %>

    <!--/.Footer-->


    <!-- SCRIPTS -->

    <!-- JQuery -->
    <script type="text/javascript" src="/js/jquery-3.2.1.min.js"></script>

    <!-- Bootstrap tooltips -->
    <script type="text/javascript" src="/js/popper.min.js"></script>

    <!-- Bootstrap core JavaScript -->
    <script type="text/javascript" src="/js/bootstrap.min.js"></script>

    <!-- MDB core JavaScript -->
    <script type="text/javascript" src="/js/mdb.min.js"></script>

    <script>
        //Animation init
        new WOW().init();

        //Modal
        $('#myModal').on('shown.bs.modal', function () {
            $('#myInput').focus()
        })

        // Material Select Initialization
        $(document).ready(function () {
            $('.mdb-select').material_select();
        });

        // SideNav Button Initialization
        $(".button-collapse").sideNav();
        // SideNav Scrollbar Initialization
        var sideNavScrollbar = document.querySelector('.custom-scrollbar');
        Ps.initialize(sideNavScrollbar);
    </script>

    <script type="text/javascript" src="/js/api.js"></script>

    <script>
        "use strict";

        const pagination = document.getElementById("pagination");
        const scripts = document.getElementById("all-scripts");

        const featuredRequest = new XMLHttpRequest();
        featuredRequest.open("GET", "/api/v3/scripts?featured=true&extended=true", false);
        featuredRequest.send();

        let featuredYay;
        try {

            featuredYay = JSON.parse(featuredRequest.response);
        } catch (error) {

            toastr["error"](`failed to parse featured scripts json with error: ${error}`);
            throw `failed to parse featured scripts json with error: ${error}`;
        }

        switch (featuredYay.status) {
            case 200:
                console.log("loaded featured scripts");
                break;
            case 403:
                toastr["error"](`failed to fetch featured scripts: 403 forbidden`);
                throw "failed to fetch featured scripts: 403 forbidden";
                break;
            case 404:
                toastr["error"](`failed to fetch featured scripts: 404 not found`);
                throw "failed to fetch featured scripts: 404 not found";
                break;
            case 500:
                toastr["error"](`failed to fetch featured scripts: 500 internal server error`);
                throw "failed to fetch featured scripts: 500 internal server error";
                break;
            default:
                toastr["error"](`failed to fetch featured scripts: ${featuredRequest.response.status}`);
                throw `failed to fetch featured scripts: ${featuredRequest.response.status}`;
        }

        for (let i = 0; i < featuredYay.scripts.length; i++) {

            const guildScriptRequest = new XMLHttpRequest();
            guildScriptRequest.open("GET", "/api/v3/guilds/" + currentServer + "/scripts/" + featuredYay.scripts[i]._id,
                false);
            guildScriptRequest.send();

            let guildScriptYay;
            try {

                console.log(guildScriptRequest.response);

                guildScriptYay = JSON.parse(guildScriptRequest.response);
            } catch (error) {

                toastr["error"](`failed to parse guild script json with error: ${error}`);
                throw `failed to parse guild script json with error: ${error}`;
            }

            $("#featured").append(
                `
                    <div class="col-sm-6 col-md-6 col-lg-4 col-xxl-3 mb-4">
                        <!-- Card -->
                        <div class="card">

                            <!-- Card image -->
                            <div class="view overlay">
                                <div class="card-image-top" alt="Card image cap" style="background: url('${featuredYay.scripts[i].thumbnail}') no-repeat center center; background-size: cover; padding-top: 100%;"></div>
                                <a>
                                    <div class="mask rgba-white-slight"></div>
                                </a>
                            </div>

                            <!-- Button -->
                            <a id="${featuredYay.scripts[i]._id}" class="btn-floating btn-action ml-auto mr-4 ${guildScriptYay.status === 200 ? "remove-script red lighten-1" : "add-script blue lighten-2"}">
                                <i class="fa ${guildScriptYay.status === 200 ? "fa-times" : "fa-plus"}" data-toggle="tooltip" data-placement="top" title="${guildScriptYay.status === 200 ? "<%= trans.REMOVE_SCRIPT_FROM %>" : "<%= trans.ADD_SCRIPT_TO %>"} ${getCookie("currentServerName")}"></i>
                            </a>

                            <!-- Card content -->
                            <div class="card-body">

                                <!-- Title -->
                                    <h4 class="card-title font-weight-bold">${featuredYay.scripts[i].name}
                                        <sup>${featuredYay.scripts[i].verified === true ? 
                                                `<span class="text-success font-weight-bold" data-toggle="tooltip"
                                                    data-placement="top" title="<%= trans.VERIFIED_SCRIPT %>">
                                                    <i class="fa fa-check pr-1"></i>
                                                </span>` : ""}</sup>
                                    </h4>
                                <hr>
                                <!-- Text -->
                                <p class="card-text">${featuredYay.scripts[i].description}
                                </p>
                                <p>
                                    <code>-${featuredYay.scripts[i].match}</code>
                                </p>
                                <p class="mb-0">
                                    <%= trans.BY %> <a href="/dashboard/profiles/${featuredYay.scripts[i].author_id}">${featuredYay.scripts[i].author_username}</a>
                                        <sup>
                                            ${featuredYay.scripts[i].author_verified === true ? 
                                                `<span class="text-info font-weight-bold" data-toggle="tooltip"
                                                data-placement="top" title="<%= trans.VERIFIED_CREATOR %>">
                                                <i class="fa fa-check pr-1"></i>
                                            </span>` : ""}
                                        </sup>
                                </p>
                            </div>
                            <!-- Card footer -->
                            <div class="rounded-bottom blue lighten-2 text-center pt-3">
                                <ul class="list-unstyled list-inline font-small">
                                    <li class="list-inline-item pr-2">
                                        <a class="white-text">
                                            <i class="${guildScriptYay.status === 200 ? "fas" : "far"} fa-cloud pr-1"></i>${featuredYay.scripts[i].guild_count}
                                            <%= trans.SERVERS %>
                                        </a>
                                    </li>
                                    <li class="list-inline-item pr-2">
                                        <a id="${featuredYay.scripts[i]._id}" class="white-text ${userYay.user.likes.includes(featuredYay.scripts[i]._id) === true ? "unlike" : "like"}" data-toggle="tooltip" data-placement="top" title="${userYay.user.likes.includes(featuredYay.scripts[i]._id) === true ? "Unlike this script!" : "Like this script!"}">
                                            <i class="${userYay.user.likes.includes(featuredYay.scripts[i]._id) === true ? "fas" : "far"} fa-heart red-text pr-1"> </i>${featuredYay.scripts[i].likes}
                                            <%= trans.LIKES %>
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                        `
            )
        }

        let yourScripts = [];
        let currentPage = 0;
        let yourScriptsLoaded = false;
        while (yourScriptsLoaded === false) {

            const yourScriptsRequest = new XMLHttpRequest();
            yourScriptsRequest.open("GET", "/api/v3/scripts/@me?limit=20&page=" + currentPage, false);
            yourScriptsRequest.send();

            let yourScriptsYay;
            try {

                yourScriptsYay = JSON.parse(yourScriptsRequest.response);
            } catch (error) {

                toastr["error"](`failed to parse your scripts json with error: ${error}`);
                throw `failed to parse your scripts json with error: ${error}`;
            }

            switch (yourScriptsYay.status) {
                case 200:
                    yourScripts.push(...yourScriptsYay.scripts);
                    console.log("loaded your scripts");
                    break;
                case 403:
                    toastr["error"](`failed to fetch your scripts: 403 forbidden`);
                    throw "failed to fetch your scripts: 403 forbidden";
                    break;
                case 404:
                    //toastr["error"](`failed to fetch your scripts: 404 not found`);
                    //throw "failed to fetch your scripts: 404 not found";
                    break;
                case 500:
                    toastr["error"](`failed to fetch your scripts: 500 internal server error`);
                    throw "failed to fetch your scripts: 500 internal server error";
                    break;
                default:
                    toastr["error"](`failed to fetch your scripts: ${yourScriptsRequest.response.status}`);
                    throw `failed to fetch your scripts: ${yourScriptsRequest.response.status}`;
            }

            if (Math.ceil(yourScriptsYay.total / yourScriptsYay.limit) - 1 > currentPage) {

                currentPage++;
            } else {

                yourScriptsLoaded = true;
            }
        }

        const yourScriptsEnabled = document.getElementById("fun");

        for (let i = 0; i < yourScripts.length; i++) {

            yourScriptsEnabled.innerHTML +=
                `
                    <div class="row">
                        <div class="col-12 border-bottom pb-2 mb-3">
                            <h5 class="float-left mt-1">${yourScripts[i].name}</h5>
                            <div class="switch round red-white-switch float-right">
                                <label>
                                    <input id="${yourScripts[i]._id}" type="checkbox" class="marketplace-enabled" ${yourScripts[i].marketplace_enabled === true ? "checked" : ""}>
                                    <span class="lever"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                `;
        }

        const marketplaceEnabled = document.getElementsByClassName("marketplace-enabled");

        for (let i = 0; i < marketplaceEnabled.length; i++) {

            marketplaceEnabled[i].onclick = function () {

                if (this.checked === true) {

                    marketplaceEnable(this);
                }

                if (this.checked === false) {

                    marketplaceDisable(this)
                }
            }
        }

        const marketplaceEnable = btn => {

            const scriptEnableRequest = new XMLHttpRequest();
            scriptEnableRequest.open("PATCH", "/api/v3/scripts/" + btn.id, false);
            scriptEnableRequest.setRequestHeader("Content-Type", "application/json");
            scriptEnableRequest.send(JSON.stringify({
                marketplace_enabled: true
            }));

            let scriptEnableYay;
            try {

                scriptEnableYay = JSON.parse(scriptEnableRequest.response);
            } catch (error) {

                toastr["error"](`failed to parse script enable json with error: ${error}`);
                throw `failed to parse script enable json with error: ${error}`;
            }

            btn.onclick = function () {

                marketplaceDisable(this);
            }
        }

        const marketplaceDisable = btn => {

            const scriptEnableRequest = new XMLHttpRequest();
            scriptEnableRequest.open("PATCH", "/api/v3/scripts/" + btn.id, false);
            scriptEnableRequest.setRequestHeader("Content-Type", "application/json");
            scriptEnableRequest.send(JSON.stringify({
                marketplace_enabled: false
            }));

            let scriptEnableYay;
            try {

                scriptEnableYay = JSON.parse(scriptEnableRequest.response);
            } catch (error) {

                toastr["error"](`failed to parse script enable json with error: ${error}`);
                throw `failed to parse script enable json with error: ${error}`;
            }

            btn.onclick = function () {

                marketplaceEnable(this);
            }
        }

        if (yourScripts.length === 0) {

            yourScriptsEnabled.innerHTML +=
                `
                    <h4 class="font-weight-bold">You have no scripts :(</h4>
                    <p class="card-text">Create a script for it to show up here</p>
                `;
        }

        function getScripts(page, search) {

            console.log(`search: ${search}`);

            const scriptsRequest = new XMLHttpRequest();
            const url = (search === null || search === undefined || search === "") ?
                `/api/v3/scripts?featured=false&extended=true&limit=8&page=${page}` :
                `/api/v3/scripts?featured=false&extended=true&name=${search}&limit=8&page=${page}`;
            scriptsRequest.open("GET", url, false);
            scriptsRequest.send();

            let scriptsYay;
            try {

                scriptsYay = JSON.parse(scriptsRequest.response);
            } catch (error) {

                toastr["error"](`failed to parse scripts json with error: ${error}`);
                throw `failed to parse scripts json with error: ${error}`;
            }

            switch (scriptsYay.status) {
                case 200:
                    console.log("loaded scripts");
                    break;
                case 403:
                    toastr["error"](`failed to fetch scripts: 403 forbidden`);
                    throw "failed to fetch scripts: 403 forbidden";
                    break;
                case 404:
                    toastr["error"](`failed to fetch scripts: 404 not found`);
                    throw "failed to fetch scripts: 404 not found";
                    break;
                case 500:
                    toastr["error"](`failed to fetch scripts: 500 internal server error`);
                    throw "failed to fetch scripts: 500 internal server error";
                    break;
                default:
                    toastr["error"](`failed to fetch scripts: ${scriptsYay.status}`);
                    throw `failed to fetch scripts: ${scriptsYay.status}`;
            }

            let pages = ``;

            scripts.innerHTML = "";

            for (let i = 0; i < scriptsYay.scripts.length; i++) {

                const guildScriptRequest = new XMLHttpRequest();
                guildScriptRequest.open("GET", "/api/v3/guilds/" + currentServer + "/scripts/" + scriptsYay.scripts[i]._id,
                    false);
                guildScriptRequest.send();

                let guildScriptYay;
                try {

                    guildScriptYay = JSON.parse(guildScriptRequest.response);
                } catch (error) {

                    toastr["error"](`failed to parse guild script json with error: ${error}`);
                    throw `failed to parse guild script json with error: ${error}`;
                }

                scripts.innerHTML +=
                    `
                            <tr class="border-bottom" style="height: 8vh">
                                <th scope="row" class="tableImage">
                                    <div class="img-fluid" style="background: url('${scriptsYay.scripts[i].thumbnail}') no-repeat center center; background-size: cover; padding-top: 100%;"></div>
                                </th>
                                <td>
                                    <h3 class="my-auto font-weight-bold">${scriptsYay.scripts[i].name}
                                        <sup>
                                            ${scriptsYay.scripts[i].verified === true ? 
                                                `<span class="text-success font-weight-bold" data-toggle="tooltip"
                                                    data-placement="top" title="<%= trans.VERIFIED_SCRIPT %>">
                                                    <i class="fa fa-check pr-1"></i>
                                                </span>` : ""}
                                        </sup>
                                    </h3>
                                    <p class="mb-0 grey-text">${scriptsYay.scripts[i].description}</p>
                                    <p class="mb-0">
                                        <%= trans.BY %> <a href="/dashboard/profiles/${scriptsYay.scripts[i].author_id}">${scriptsYay.scripts[i].author_username}</a>
                                        <sup>
                                            ${scriptsYay.scripts[i].author_verified === true ? 
                                                `<span class="text-info font-weight-bold" data-toggle="tooltip"
                                                data-placement="top" title="<%= trans.VERIFIED_CREATOR %>">
                                                <i class="fa fa-check pr-1"></i>
                                            </span>` : ""}
                                            
                                        </sup>
                                    </p>
                                </td>
                                <td class="">
                                    <a id="${scriptsYay.scripts[i]._id}" class="btn-floating btn-sm ml-auto mr-4 ${guildScriptYay.status === 200 ? "remove-script red lighten-1" : "add-script blue lighten-2"}" style="margin-top: -2.1rem; float: right">
                                        <i class="fa ${guildScriptYay.status === 200 ? "fa-times" : "fa-plus"}" data-toggle="tooltip" data-placement="top"
                                            title="${guildScriptYay.status === 200 ? "<%= trans.REMOVE_SCRIPT_FROM %>" : "<%= trans.ADD_SCRIPT_TO %>"} ${getCookie("currentServerName")}"></i>
                                    </a>
                                    <ul class="list-unstyled">
                                        <li class="list-item">
                                            <a>
                                                <i class="${guildScriptYay.status === 200 ? "fas" : "far"} fa-cloud blue-text pr-1"></i>${scriptsYay.scripts[i].guild_count}
                                                <%= trans.SERVERS %>
                                            </a>
                                        </li>
                                        <li class="list-item">
                                            <a id="${scriptsYay.scripts[i]._id}" class="${userYay.user.likes.includes(scriptsYay.scripts[i]._id) === true ? "unlike" : "like"}" data-toggle="tooltip" data-placement="top" title="${userYay.user.likes.includes(scriptsYay.scripts[i]._id) === true ? "Unlike this script!" : "Like this script!"}">
                                                <i class="${userYay.user.likes.includes(scriptsYay.scripts[i]._id) === true ? "fas" : "far"} fa-heart red-text pr-1"> </i>${scriptsYay.scripts[i].likes}
                                                <%= trans.LIKES %>
                                            </a>
                                        </li>
                                    </ul>
                                </td>
                            </tr>
                    `;
            }

            for (let i = 0; i < Math.ceil(scriptsYay.total / scriptsYay.limit); i++) {

                if (((page === 0 || page === Math.ceil(scriptsYay.total / scriptsYay.limit) - 1) && Math.abs(page - i) <
                        5) || ((page === 1 || page === Math.ceil(scriptsYay.total / scriptsYay.limit) - 2) && Math.abs(
                        page - i) < 4) || (Math.abs(page - i) < 3)) {

                    pages +=
                        `
                                <li id="pagination-${i}" class="page-item ${page === i ? 'active' : ''}">
                                    <a style="user-select: none; -moz-user-select: none;" class="page-link">${i + 1}</a>
                                </li>
                        `;
                }
            }

            pagination.innerHTML =
                `
                        <!--First-->
                        <li id="pagination-first" class="page-item ${page <= 0 ? 'disabled' : ''}">
                            <a style="user-select: none; -moz-user-select: none;" class="page-link">First</a>
                        </li>

                        <!--Arrow left-->
                        <li id="pagination-previous" class="page-item ${page <= 0 ? 'disabled' : ''}">
                            <a class="page-link" aria-label="Previous">
                                <span style="user-select: none; -moz-user-select: none;" aria-hidden="true">&laquo;</span>
                                <span class="sr-only">Previous</span>
                            </a>
                        </li>

                        <!--Numbers-->
                        ${pages}

                        <!--Arrow right-->
                        <li id="pagination-next" class="page-item ${page >= Math.ceil(scriptsYay.total / scriptsYay.limit) - 1 ? 'disabled' : ''}">
                            <a class="page-link" aria-label="Next">
                                <span style="user-select: none; -moz-user-select: none;" aria-hidden="true">&raquo;</span>
                                <span class="sr-only">Next</span>
                            </a>
                        </li>

                        <!--Last-->
                        <li id="pagination-last" class="page-item ${page >= Math.ceil(scriptsYay.total / scriptsYay.limit) - 1 ? 'disabled' : ''}">
                            <a style="user-select: none; -moz-user-select: none;" class="page-link">Last</a>
                        </li>
                `;

            document.getElementById("pagination-last").onclick = () => {

                getScripts(Math.ceil(scriptsYay.total / scriptsYay.limit) - 1, search);
            };

            document.getElementById("pagination-first").onclick = () => {

                getScripts(0, search);
            };

            document.getElementById("pagination-next").onclick = () => {

                getScripts(page + 1, search);
            };

            document.getElementById("pagination-previous").onclick = () => {

                getScripts(page - 1, search);
            };

            for (let i = 0; i < Math.ceil(scriptsYay.total / scriptsYay.limit); i++) {

                if (page === i) {

                    continue;
                }

                if (((page === 0 || page === Math.ceil(scriptsYay.total / scriptsYay.limit) - 1) && Math.abs(page - i) <
                        5) || ((page === 1 || page === Math.ceil(scriptsYay.total / scriptsYay.limit) - 2) && Math.abs(
                        page - i) < 4) || (Math.abs(page - i) < 3)) {

                    document.getElementById(`pagination-${i}`).onclick = () => {

                        getScripts(i, search);
                    };
                }
            }

            const likes = document.getElementsByClassName("like");
            const unlikes = document.getElementsByClassName("unlike");

            for (let i = 0; i < likes.length; i++) {

                likes[i].onclick = function () {

                    likeScript(this);
                };
            }

            for (let i = 0; i < unlikes.length; i++) {

                unlikes[i].onclick = function () {

                    unlikeScript(this);
                };
            }

            const adds = document.getElementsByClassName("add-script");
            const removes = document.getElementsByClassName("remove-script");

            for (let i = 0; i < adds.length; i++) {

                adds[i].onclick = function () {

                    addScript(this);
                }
            }

            for (let i = 0; i < removes.length; i++) {

                removes[i].onclick = function () {

                    removeScript(this);
                }
            }

            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            });
        }

        const addScript = btn => {

            const scriptAddRequest = new XMLHttpRequest();
            scriptAddRequest.open("POST", "/api/v3/guilds/" + currentServer + "/scripts", false);
            scriptAddRequest.setRequestHeader("Content-Type", "application/json");
            scriptAddRequest.send(JSON.stringify({
                object_id: btn.id
            }));

            let scriptAddYay;
            try {

                scriptAddYay = JSON.parse(scriptAddRequest.response);
            } catch (error) {

                toastr["error"](`failed to parse script add json with error: ${error}`);
                throw `failed to parse script add json with error: ${error}`;
            }

            btn.classList.remove("add-script");
            btn.classList.remove("blue");
            btn.classList.remove("lighten-2");
            btn.childNodes[1].classList.remove("fa-plus");

            btn.classList.add("remove-script");
            btn.classList.add("red");
            btn.classList.add("lighten-1");
            btn.childNodes[1].classList.add("fa-times");

            let failed = false;
            try {

                btn.parentNode.childNodes[3].childNodes[1].childNodes[1].childNodes[1].classList.remove("far");
                btn.parentNode.childNodes[3].childNodes[1].childNodes[1].childNodes[1].classList.add("fas");

                btn.parentNode.childNodes[3].childNodes[1].childNodes[1].childNodes[2].nodeValue = (parseInt(btn.parentNode
                        .childNodes[3].childNodes[1].childNodes[1].childNodes[2].nodeValue.split(" ")[0]) + 1) +
                    " Servers";

            } catch (error) {

                failed = true;
            }

            if (failed === true) {

                btn.parentNode.childNodes[15].childNodes[1].childNodes[1].childNodes[1].childNodes[1].classList.remove(
                    "far");
                btn.parentNode.childNodes[15].childNodes[1].childNodes[1].childNodes[1].childNodes[1].classList.add(
                    "fas");

                btn.parentNode.childNodes[15].childNodes[1].childNodes[1].childNodes[1].childNodes[2].nodeValue = (
                    parseInt(btn.parentNode.childNodes[15].childNodes[1].childNodes[1].childNodes[1].childNodes[
                        2].nodeValue.split(" ")[0]) + 1) + " Servers";
            }

            btn.childNodes[1].title = "Remove this script from " + getCookie("currentServerName");
            //btn.childNodes[1]["data-original-title"] = "Remove this script from " + getCookie("currentServerName");

            $(function () {
                $('[data-toggle="tooltip"]').tooltip('dispose')
                $('[data-toggle="tooltip"]').tooltip()
            });

            btn.onclick = function () {

                removeScript(this);
            };
        }

        const removeScript = btn => {

            const scriptRemoveRequest = new XMLHttpRequest();
            scriptRemoveRequest.open("DELETE", "/api/v3/guilds/" + currentServer + "/scripts/" + btn.id, false);
            scriptRemoveRequest.send();

            let scriptRemoveYay;
            try {

                scriptRemoveYay = JSON.parse(scriptRemoveRequest.response);
            } catch (error) {

                toastr["error"](`failed to parse script remove json with error: ${error}`);
                throw `failed to parse script remove json with error: ${error}`;
            }

            btn.classList.remove("remove-script");
            btn.classList.remove("red");
            btn.classList.remove("lighten-1");
            btn.childNodes[1].classList.remove("fa-times");

            btn.classList.add("add-script");
            btn.classList.add("blue");
            btn.classList.add("lighten-2");
            btn.childNodes[1].classList.add("fa-plus");

            let failed = false;
            try {

                btn.parentNode.childNodes[3].childNodes[1].childNodes[1].childNodes[1].classList.remove("fas");
                btn.parentNode.childNodes[3].childNodes[1].childNodes[1].childNodes[1].classList.add("far");

                btn.parentNode.childNodes[3].childNodes[1].childNodes[1].childNodes[2].nodeValue = (parseInt(btn.parentNode
                        .childNodes[3].childNodes[1].childNodes[1].childNodes[2].nodeValue.split(" ")[0]) - 1) +
                    " Servers";

            } catch (error) {

                failed = true;
            }

            if (failed === true) {

                btn.parentNode.childNodes[15].childNodes[1].childNodes[1].childNodes[1].childNodes[1].classList.remove(
                    "fas");
                btn.parentNode.childNodes[15].childNodes[1].childNodes[1].childNodes[1].childNodes[1].classList.add(
                    "far");

                btn.parentNode.childNodes[15].childNodes[1].childNodes[1].childNodes[1].childNodes[2].nodeValue = (
                    parseInt(btn.parentNode.childNodes[15].childNodes[1].childNodes[1].childNodes[1].childNodes[
                        2].nodeValue.split(" ")[0]) - 1) + " Servers";
            }

            btn.childNodes[1].title = "Add this script to " + getCookie("currentServerName");
            //btn.childNodes[1]["data-original-title"] = "Add this script to " + getCookie("currentServerName");

            $(function () {
                $('[data-toggle="tooltip"]').tooltip('dispose')
                $('[data-toggle="tooltip"]').tooltip()
            });

            btn.onclick = function () {

                addScript(this);
            };
        }

        const likeScript = btn => {

            const scriptLikeRequest = new XMLHttpRequest();
            scriptLikeRequest.open("POST", "/api/v3/scripts/" + btn.id + "/likes", false);
            scriptLikeRequest.send();

            let scriptLikeYay;
            try {

                scriptLikeYay = JSON.parse(scriptLikeRequest.response);
            } catch (error) {

                toastr["error"](`failed to parse script like json with error: ${error}`);
                throw `failed to parse script like json with error: ${error}`;
            }

            btn.childNodes[1].classList.remove("far");
            btn.childNodes[1].classList.remove("like");

            btn.childNodes[1].classList.add("fas");
            btn.childNodes[1].classList.add("unlike");

            btn.childNodes[2].nodeValue = (parseInt(btn.childNodes[2].nodeValue.split(" ")[0]) + 1) + " Likes";
            btn.title = "Unlike this script";

            $(function () {
                $('[data-toggle="tooltip"]').tooltip('dispose')
                $('[data-toggle="tooltip"]').tooltip()
            });

            btn.onclick = function () {

                unlikeScript(this);
            };
        }

        const unlikeScript = btn => {

            const scriptUnlikeRequest = new XMLHttpRequest();
            scriptUnlikeRequest.open("DELETE", "/api/v3/scripts/" + btn.id + "/likes", false);
            scriptUnlikeRequest.send();

            let scriptUnlikeYay;
            try {

                scriptUnlikeYay = JSON.parse(scriptUnlikeRequest.response);
            } catch (error) {

                toastr["error"](`failed to parse script unlike json with error: ${error}`);
                throw `failed to parse script unlike json with error: ${error}`;
            }

            btn.childNodes[1].classList.remove("fas");
            btn.childNodes[1].classList.remove("unlike");

            btn.childNodes[1].classList.add("far");
            btn.childNodes[1].classList.add("like");

            btn.childNodes[2].nodeValue = (parseInt(btn.childNodes[2].nodeValue.split(" ")[0]) - 1) + " Likes";
            btn.title = "Like this script";

            $(function () {
                $('[data-toggle="tooltip"]').tooltip('dispose')
                $('[data-toggle="tooltip"]').tooltip()
            });

            btn.onclick = function () {

                likeScript(this);
            };
        }

        const searchBox = document.getElementById("search");
        searchBox.addEventListener("keypress", function (e) {

            if (e.keyCode === 13) {

                getScripts(0, this.value);
            }
        });

        const searchBtn = document.getElementById("searchBtn");
        searchBtn.onclick = () => {

            getScripts(0, searchBox.value);
            searchBox.value = "";

            return false;
        }

        getScripts(0, "");

        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        });
    </script>

</body>

</html>