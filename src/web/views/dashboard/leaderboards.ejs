<!DOCTYPE html>
<html class="full-height" lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <link rel="shortcut icon" type="image/png" href="../img/favicon.png" />
    <title>AWESOM-O // Dashboard</title>
    <!-- Font Awesome-->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <!-- Bootstrap core CSS-->
    <link href="../../css/bootstrap.min.css" rel="stylesheet">
    <!-- Material Design Bootstrap-->
    <link href="../../css/mdb.min.css" rel="stylesheet">
    <!-- Template styles-->
    <style>
        /* TEMPLATE STYLES */
        /*{
        border-style: dashed;
        border-color: red;
        border-width: 1px;
    }
    */

        .flex-center {
            color: #fff;
        }

        .intro-1 {
            background: url("../../img/awesomo-bg.jpg")no-repeat center center;
            background-size: cover;
        }

        .navbar .btn-group .dropdown-menu a:hover {
            color: #000 !important;
        }

        .navbar .btn-group .dropdown-menu a:active {
            color: #fff !important;
        }
    </style>

    <!-- Referencing Stuff -->
    <% var avatar = "https://cdn.discordapp.com/avatars/" + user.id + "/" + user.avatar + ".png?size=2048"%>




</head>

<body>
    <header>
        <!-- Navbar-->
        <% include ../partials/dnavbar %>

        <!-- Main container-->
        <div class="container">
            <div class="divider-new "></div>
            <!-- Grid row -->
            <div class="row">

                <!-- Grid column -->
                <div class="col-lg-4 col-md-6 mb-12">

                    <img src="<%= avatar%>" class="z-depth-1 float-right" height="128px" alt="Responsive image">

                </div>
                <!-- Grid column -->

                <!-- Grid column -->
                <div class="col-lg-8 col-md-6 mb-12">

                    <h3>Logged in as:
                        <b>
                            <%= user.username%>
                        </b>
                    </h3>

                    <% var currentServer = user.guilds.find(e => { %>
                        <% return e.id == server._id; %>
                            <% }); %>
                                <h5>Viewing:
                                    <b>
                                        <%= currentServer.name %>
                                    </b>
                                </h5>
                                <a href="legacy"><button type="button" class="btn btn-primary">View Legacy Leaderboard</button></a>
                </div>
                <!-- Grid column -->
            </div>
    
                <!-- Grid row -->
                <a id="activity"><div class="divider-new"></a>
                    <h2 class="h2-responsive wow fadeIn" data-wow-delay="0.2s">Activity Leaderboard</h2>
                </div>
                <div class="row">
                    <canvas id="Vm14Hz5JZXNiZntjIswXBTlZVbmx9xFk"></canvas>
                </div>
                <a id="shits"><div class="divider-new"></a>
                    <h2 class="h2-responsive wow fadeIn" data-wow-delay="0.2s">It Hits The Fan Leaderboard</h2>
                </div>
                <div class="row">
                    <canvas id="jnNiROoPbUKHmAKIPxXwW0QaAT5oIUgu"></canvas>
                </div>
            </div>
            <!-- / Main container-->
        <!-- Footer-->
        <% include ../partials/footer %>
        <!-- /.Footer-->
        <!-- SCRIPTS-->
        <!-- JQuery-->
        <script type="text/javascript" src="../../js/jquery-3.2.1.min.js"></script>
        <!-- Bootstrap dropdown-->
        <script type="text/javascript" src="../../js/popper.min.js"></script>
        <!-- Bootstrap core JavaScript-->
        <script type="text/javascript" src="../../js/bootstrap.min.js"></script>
        <!-- MDB core JavaScript-->
        <script type="text/javascript" src="../../js/mdb.min.js"></script>

        <!-- Animations init-->
        <script>
            new WOW().init();
        </script>

        <script>
            /** ----------------------------------------
            *           GRAPH PARSING SCRIPT
            *   ----------------------------------------
            */

            const server = <%- JSON.stringify(server) %>;

            for (var i = 0; i < server.graphs.length; i++) {
                var element = document.getElementById(server.graphs[i].id);
                if (element != null) {

                    var graph = server.graphs[i];

                    //
                    var data = {};
                    switch(graph.type) {
                        case "line":

                            break;
                        case "pie":

                            break;
                        case "bar":

                            //
                            data = {
                                labels: [],
                                datasets: []
                            };

                            for (var j = 0; j < graph.data.datasets.length; j++) {

                                var stat = graph.data.datasets[j].stat;
                                var member = graph.data.datasets[j].member;
                                var theme = server.graphs[i].data.datasets[j].theme;

                                data.datasets[j] = {};

                                data.datasets[j].label = stat;

                                data.datasets[j].data = [];

                                // make it #topany

                                switch(member) {
                                    case "#top5":

                                        //
                                        server.members.sort((a, b) => {

                                            var aStat = a.stats.find(e => {
                                                return e.name == stat;
                                            });
                                            var bStat = b.stats.find(e => {
                                                return e.name == stat;
                                            });
                                            
                                            if (aStat == undefined) {
                                                aStat = {
                                                    value: 0
                                                }
                                            }
                                            if (bStat == undefined) {
                                                bStat = {
                                                    value: 0
                                                }
                                            }

                                            return bStat.value - aStat.value;
                                        });

                                        for (var k = 0; k < (server.members.length < 5 ? server.members.length : 5); k++) {
                                            data.labels.push(server.members[k].name);

                                            var memberStat = server.members[k].stats.find(e => {
                                                return e.name == stat;
                                            });
                                            if (memberStat == undefined) {
                                                memberStat = {
                                                    value: 0
                                                }
                                            }

                                            data.datasets[j].data.push(memberStat.value);
                                            //
                                        }

                                        break;
                                }

                                // Hardcoded themes yay! (kill me)
                                switch(theme) {
                                    case "shit":
                                        //temp
                                        data.datasets[j].backgroundColor = [
                                            'rgba(51, 17, 0, 1)',
                                            'rgba(71, 30, 9, 1)',
                                            'rgba(99, 50, 24, 1)',
                                            'rgba(112, 63, 37, 1)',
                                            'rgba(127, 78, 52, 1)',
                                        ];
                                        //temp
                                        data.datasets[j].borderColor = [
                                            'rgba(51, 17, 0, 1)',
                                            'rgba(71, 30, 9, 1)',
                                            'rgba(99, 50, 24, 1)',
                                            'rgba(112, 63, 37, 1)',
                                            'rgba(127, 78, 52, 1)',
                                        ];
                                        break;
                                    default:
                                        //temp
                                        data.datasets[j].backgroundColor = [
                                            'rgba(255, 99, 132, 1)',
                                            'rgba(54, 162, 235, 1)',
                                            'rgba(255, 206, 86, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(153, 102, 255, 1)',
                                            'rgba(255, 159, 64, 1)'
                                        ];
                                        //temp
                                        data.datasets[j].borderColor = [
                                            'rgba(255,99,132,1)',
                                            'rgba(54, 162, 235, 1)',
                                            'rgba(255, 206, 86, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(153, 102, 255, 1)',
                                            'rgba(255, 159, 64, 1)'
                                        ];
                                        break;
                                }

                                data.datasets[j].borderWidth = 1;
                            }


                            break;
                        /*
                        case "card":

                            break;
                        */
                    }
                    //

                    console.log(data);

                    var ctx = element.getContext("2d");
                    var chart = new Chart(ctx, {
                        type: /*server.graphs[i].type*/ "bar",
                        data: /*{
                            labels: ["Kyrion", "Tweek Tweak", "Paladin Butters", "kratosgow342", "Smash Royale"],
                            datasets: [{
                                label: 'Activity Score',
                                data: [56236, 42140, 39196, 36656, 29217.140772982006],
                                backgroundColor: [
                                    'rgb(255, 99, 132)',
                                    'rgb(54, 162, 235)',
                                    'rgb(255, 206, 86)',
                                    'rgb(75, 192, 192)',
                                    'rgb(153, 102, 255)',
                                ],
                            }]
                        }*/data,
                        options: {
                            responsive: true
                        }
                    })
                }
            }

        </script>

</body>

</html>