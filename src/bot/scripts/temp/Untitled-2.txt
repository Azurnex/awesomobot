scripts:
*drop > db read access
- what we want people to see?
*drop > limited db write access
- where can they write
- how can they write, what happens when they run out
- how do we optimise the writes
- how much can they write
- DONT .save existing docs, ONLY .update!
- ^ how do we get people to do that - custom mongo wrapper?
- ^ mongo crate like all the others (renderer, etc.)
*tree & node > event scripts
- what discord events can be hooked
- any custom events (command vs message)
- event propagation (make command checking a script)
- allow people to make their own events
- ^ how to handle dependencies (awesomo npm teehee)
- circular event calls will never end
- ^ do we have a total time an event chain can run
- ^ or just make sure events cant be circular
*tree & leaf > script event loop
- do we wanna make a custom promise/async lib
- do we kill long running scripts - probably yes
- how long can a script run for before timeout
- how do we schedule tasks, do we let node handle that
- how do we guarantee a script finishes (esp core scripts)
- need a way to add core scripts in vscode
- ^ these need to be integrated with user scripts
*drop > http, renderer, and other mods
- how do we prevent abuse - ratelimiting?
- only available if someone is approved/knows their shit?
- how do we expose those to scripts
- how would allowing these in some events affect perf
*??? > file hosting
- where do we store them
- how much do we allow to store
- what stuff can be stored (we dont want weird shit)
- how do we keep track of them and clean up after
- can reference by fp + attach url bit if access over http
*tree > script cache
- how do we cache - compile?
- what do we cache - how do we decide
- how long and how much cache?
*node & leaf > script version control & tags
- how do we store versions - diff?
- how much can we store, if anything
- versioning - semver?
- if state tag (beta, etc.) tag not assigned, get latest ver?
- allow editing of old versions - probably not
- how do we handle release tags
- do we let people choose what version they want
- ^ what version do we default to
- ^ automatic or manual updates?
*leaf > custom tags for sorting
- also better sorting in api v4
- used for search as well
- do we have predefined tags or let people use their own
- how to handle abuse to get top in search
*node & leaf > multiple script authors
- how do you add people to script 'repo'
- credit section for scripts
*node & leaf > script page
- credit
- authors
- better desc
- more customisable script info
- versions, releases, etc.
- issues & comments
- stats
- wiki
- ^ (all above - make them just templates?)
- ^ completely customisable pages
- custom html/md + css + (js? - probably not)
*leaf > script packages
- seperate from scripts - yes so a script can be in multiple
- anyone can make them
- allow script authors to disallow putting their script in one?
- how do we handle dependencies AND diff releases/version
- package pages vs script pages?
*node & leaf > script pull requests
- approved by authors?
*leaf > search
- script recommendations? (ml/voodoo algos)
- tags
- likes
- guilds
- name
- package/single
- status (release, etc.)
- more...
*leaf > nsfw scripts
- options
- detection
- special tag
*drop & node & leaf> src code browser for scripts
- how
- do we allow authors to disallow viewing src code - debatable
- ^ how will this work with contributing?
- ^ how will this work with knowing the script wont fuck you
- ^ approved scripts - w/ versioning/release system
*node & leaf > script projects
- how does this tie in with comments & issues
- is it really necessary - probably not
> how do we handle statistics
- collection using scripts
- do we let people opt out - or only patrons?
- force some scripts to be enabled (core, this)
> api v4 statistics route
- like the twitter thing for getting user stats
- basically like selling user info
- only for patrons
- limited user access for leaderboards, website stats
- allow users to delet data - gdpr
- allow users to see what we collect - gdpr
- ^ if this is a script, we can use script page for that info
- ^ need to keep track of what we collect to easily delet
> better login/api keys
- need approval for key?
- separate key from session token
> seperate api from webserver
- better perf
- wont be an issue since website doesnt use client at all
- pls do this soon:tm:
> db optimisation for when we need it to be standalone
- measure perf impact
- pls we need backups badly now
- just get it optimised teehee
> better script editor
- preview output so no need for shitty cmd spam when testing
- preview support for some modules (rendered)
- using assets stored on our server
- ^ bandwidth implications & how we solve those
> user made libs
- non executable scripts
- used for utility purposes
- how do we handle versioning, deps, etc.
> workspaces
- only for organisation purposes
- allows you to gather all your libs, script in one place
- easily select which are private, and which published